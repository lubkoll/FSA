#error Documentation only.

/** MODULES **/

/**
 * @defgroup AdapterGroup Adapters
 * @brief Adapters to third-party libraries.
 */
   /**
    * @defgroup FenicsGroup FEniCS
    * @ingroup AdapterGroup
    * @brief %Vector spaces, functionals and operators for <a href="http://www.fenicsproject.org">FEniCS</a>.
    */

    
   /**
    * @defgroup KaskadeGroup Kaskade7
    * @ingroup AdapterGroup
    * @brief %Vector spaces, functionals and operators for <a href="http://www.zib.de/projects/kaskade7-finite-element-toolbox">Kaskade7</a>.
    */

   /**
    * @defgroup EigenGroup Eigen
    * @ingroup AdapterGroup
    * @brief %Vector spaces, functionals and operators for <a href="http://eigen.tuxfamily.org">Eigen</a>.
    */
     
   /**
    * @defgroup GenericGroup Generic
    * @ingroup AdapterGroup
    * @brief Generic implementations for vector spaces to simplify the implementation of adapters.
    */
   
/**
 * @defgroup VectorSpaceGroup Vector Spaces
 *
 * @brief Collection of available vector spaces.
 *
 * Contains models for one-dimensional and product spaces as well as vector spaces for FEnics and Kaskade 7.
 */
  /**
    * @defgroup ScalarGroup Scalar
    * @ingroup VectorSpaceGroup, AdapterGroup
    * @brief Everything required for one-dimensional problems.
    * 
    * Contains:
    *   - Real numbers
    *   - a one-dimensional vector space
    *   - linear and nonlinear operators, functionals and solvers
    */

  /**
    * @defgroup ProductSpaceGroup Product Space
    * @ingroup VectorSpaceGroup
    * @brief A product space that supports distinction between primal and dual variables.
    */


/**
 * @defgroup AlgorithmGroup Algorithms
 * @brief Contains different algorithms that can be formulated in vector spaces.
 *
 * Contains different variants of conjugate gradient methods for convex and nonconvex problems, different newton methods and an affine covariant composite step method.
 */
 
  /**
   * @defgroup NewtonGroup Newton Methods
   * @ingroup AlgorithmGroup
   * @brief %Newton methods, largely following @cite Deuflhard2004.
   *
   * Contains a local %Newton method, an affine covariant %Newton method, an affine contravariant %Newton method as well as a generic implementation that admits the implementation of further termination 
   * criteria and damping strategies.
   */
 
  /**
   * @defgroup CGGroup Conjugate Gradient Methods
   * @ingroup AlgorithmGroup
   * @brief Conjugate gradient methods for convex and nonconvex problems (%CG, Truncated %CG, Regularized %CG and Truncated Regularized %CG).
   */ 

  /**
   * @defgroup CSGroup Composite Step Methods
   * @ingroup AlgorithmGroup
   * @brief Contains the affine covariant composite step method of \cite Lubkoll2015, \cite Lubkoll2015a.
   */
   
  /**
   * @defgroup ConceptGroup Concepts
   * @brief %Concepts for vectors, functionals, operators, ...
   */

  
/** NAMESPACES **/
   
  /**
   * @namespace Spacy
   * @brief Main namespace of the %Spacy library.
   */
 

 
   /**
   * @namespace Spacy::CG
   * @ingroup CGGroup
   * @brief Conjugate gradient methods for convex and nonconvex problems (%CG, Truncated %CG, Regularized %CG and Truncated Regularized %CG).
   */ 
     
    /**
     * @namespace Spacy::CG::Termination
     * @brief %Termination criteria for conjugate gradient methods.
     */
  
  /**
   * @namespace Spacy::Newton
   * @brief %Newton methods, largely following @cite Deuflhard2004.
   *
   * Contains a local %Newton method, an affine covariant %Newton method, an affine contravariant %Newton method as well as a generic implementation that admits the implementation of further termination 
   * criteria and damping strategies.
   */
     
    /**
     * @namespace Spacy::Newton::Damping
     * @brief %Damping strategies for %Newton's method.
     */
     
    /**
     * @namespace Spacy::Newton::Termination
     * @brief %Termination criteria for %Newton's method.
     */
       
  /**
   * @namespace Spacy::CompositeStep
   * @brief Contains the affine covariant composite step method of \cite Lubkoll2015, \cite Lubkoll2015a.
   */
     

  /**
   * @namespace Spacy::ProductSpace
   * @brief  A product space that supports distinction between primal and dual variables.
   */
   
  /**
   * @namespace Spacy::FEniCS
   * @brief Contains vector spaces, functionals and operators for <a href="www.fenicsproject.org">FEniCS</a>.
   */
   
  /**
   * @namespace Spacy::Kaskade
   * @brief Contains vector spaces, functionals and operators for <a href="http://www.zib.de/projects/kaskade7-finite-element-toolbox">Kaskade7</a>.
   */
   
  /**
   * @namespace Spacy::Scalar
   * @brief Contains functionals and operators for scalar problems.
   */
   
  /**
   * @namespace Spacy::Rn
   * @brief Contains functionals and operators for finite dimensional vector space problems, based on <a href="http://eigen.tuxfamily.org">Eigen</a>.
   */
   
  /**
   * @namespace Spacy::Generic
   * @brief Contains generic implementations for easier definitions of vectors and a generic scalar product implementation.
   * @see VectorBase, AddArithmeticOperators, OperatorBase, FunctionalBase
   */
   
   
   /**
    * @namespace Spacy::Mixin
    * @brief Contains small independent components that are frequently used and can be added to classes via (multiple) inheritance.
    *
    * Among the mixin components are 
    * - components for different accuracy requirements (Mixin::RelativeAccuracy, Mixin::AbsoluteAccuracy, Mixin::MinimalAccuracy, Mixin::DampingAccuracy)
    * - a component for the maximal attainable accuracy (Mixin::Eps)
    * - a component for the maximal number of steps/iterations (Mixin::MaxSteps)
    * - components for elementary algorithmic decisions (Mixin::ContractionRate, Mixin::DecreaseCondition, Mixin::RegularityTest)
    * - indices for variables in optimization and optimal control problems
    * ...
    */
   
   
