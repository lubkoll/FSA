// This file was automatically generated by friendly type erasure.
// Please do not modify.

#pragma once

#include <memory>
#include <functional>
#include "Spacy/Util/table_util.hh"
#include <Spacy/vector.hh>
#include "Detail/details_for_linearSolver.hh"

namespace Spacy
{
    /// Type-erased linear solver.
    using LinearSolver = std::function< Vector( const Vector& ) >;

    /// Type-erased indefinite linear solver. Additionally monitors if the underlying operator is positive definite.
    class IndefiniteLinearSolver
    {
    public:
        IndefiniteLinearSolver() noexcept;

        template < typename T, typename std::enable_if< IndefiniteLinearSolverDetail::IndefiniteLinearSolverConcept<
                                   IndefiniteLinearSolver, typename std::decay< T >::type >::value >::type* = nullptr >
        IndefiniteLinearSolver( T&& value )
            : functions_( {&type_erasure_table_detail::delete_impl< typename std::decay< T >::type >,
                           &type_erasure_table_detail::clone_impl< typename std::decay< T >::type >,
                           &IndefiniteLinearSolverDetail::execution_wrapper<
                               IndefiniteLinearSolver, typename std::decay< T >::type >::call_const_Vector_ref,
                           &IndefiniteLinearSolverDetail::execution_wrapper<
                               IndefiniteLinearSolver, typename std::decay< T >::type >::isPositiveDefinite} ),
              type_id_( typeid( typename std::decay< T >::type ).hash_code() ),
              impl_( new typename std::decay< T >::type( std::forward< T >( value ) ) )
        {
        }

        IndefiniteLinearSolver( const IndefiniteLinearSolver& other );

        IndefiniteLinearSolver( IndefiniteLinearSolver&& other ) noexcept;

        ~IndefiniteLinearSolver();

        template < typename T, typename std::enable_if< IndefiniteLinearSolverDetail::IndefiniteLinearSolverConcept<
                                   IndefiniteLinearSolver, typename std::decay< T >::type >::value >::type* = nullptr >
        IndefiniteLinearSolver& operator=( T&& value )
        {
            return *this = IndefiniteLinearSolver( std::forward< T >( value ) );
        }

        IndefiniteLinearSolver& operator=( const IndefiniteLinearSolver& other );

        IndefiniteLinearSolver& operator=( IndefiniteLinearSolver&& other ) noexcept;

        /**
         * @brief Checks if the type-erased interface holds an implementation.
         * @return true if an implementation is stored, else false
         */
        explicit operator bool() const noexcept;

        Vector operator()( const Vector& x ) const;

        bool isPositiveDefinite() const;

        /**
        * @brief Conversion of the stored implementation to @code  T* @endcode.
        * @return pointer to the stored object if conversion was successful, else nullptr
        */
        template < class T >
        T* target() noexcept
        {
            if ( !impl_ )
                return nullptr;
            return type_erasure_table_detail::dynamic_cast_impl< T >( type_id_, impl_ );
        }

        /**
        * @brief Conversion of the stored implementation to @code const T* @endcode.
        * @return pointer to the stored object if conversion was successful, else nullptr
        */
        template < class T >
        const T* target() const noexcept
        {
            if ( !impl_ )
                return nullptr;
            return type_erasure_table_detail::dynamic_cast_impl< T >( type_id_, impl_ );
        }

    private:
        void reset() noexcept;

        IndefiniteLinearSolverDetail::Functions< IndefiniteLinearSolver > functions_;
        std::size_t type_id_;
        void* impl_ = nullptr;
    };
}
