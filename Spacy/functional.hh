// This file was automatically generated by friendly type erasure.
// Please do not modify.

#pragma once

#include <array>
#include "Spacy/Util/table_util.hh"
#include <Spacy/Spaces/ScalarSpace/Real.hh>
#include <Spacy/vector.hh>
#include <Spacy/vectorSpace.hh>
#include "Detail/details_for_functional.hh"

namespace Spacy
{
    /// Type-erased functional \f$f:\ X \to \mathbb{R} \f$.
    class Functional
    {
    public:
        Functional() noexcept;

        template < typename T, typename std::enable_if< FunctionalDetail::FunctionalConcept<
                                   Functional, typename std::decay< T >::type >::value >::type* = nullptr >
        Functional( T&& value )
            : functions_(
                  {&type_erasure_table_detail::clone_into_shared_ptr< typename std::decay< T >::type >,
                   &type_erasure_table_detail::clone_into_buffer< typename std::decay< T >::type, Buffer >,
                   &FunctionalDetail::execution_wrapper< Functional,
                                                         typename std::decay< T >::type >::call_const_Vector_ref,
                   &FunctionalDetail::execution_wrapper< Functional, typename std::decay< T >::type >::domain} ),
              type_id_( typeid( typename std::decay< T >::type ).hash_code() ), impl_( nullptr )
        {
            if ( sizeof( typename std::decay< T >::type ) <= sizeof( Buffer ) )
            {
                new ( &buffer_ ) typename std::decay< T >::type( std::forward< T >( value ) );
                impl_ = std::shared_ptr< typename std::decay< T >::type >(
                    std::shared_ptr< typename std::decay< T >::type >(),
                    static_cast< typename std::decay< T >::type* >( static_cast< void* >( &buffer_ ) ) );
            }
            else
                impl_ = std::make_shared< typename std::decay< T >::type >( std::forward< T >( value ) );
        }

        Functional( const Functional& other );

        Functional( Functional&& other ) noexcept;

        template < typename T, typename std::enable_if< FunctionalDetail::FunctionalConcept<
                                   Functional, typename std::decay< T >::type >::value >::type* = nullptr >
        Functional& operator=( T&& value )
        {
            return *this = Functional( std::forward< T >( value ) );
        }

        Functional& operator=( const Functional& other );

        Functional& operator=( Functional&& other ) noexcept;

        /**
         * @brief Checks if the type-erased interface holds an implementation.
         * @return true if an implementation is stored, else false
         */
        explicit operator bool() const noexcept;

        /// Apply functional.
        Real operator()( const Vector& x ) const;

        /// Access domain space \f$X\f$.
        const VectorSpace& domain() const;

        /**
        * @brief Conversion of the stored implementation to @code  T* @endcode.
        * @return pointer to the stored object if conversion was successful, else nullptr
        */
        template < class T >
        T* target() noexcept
        {
            if ( !impl_ )
                return nullptr;
            return type_erasure_table_detail::dynamic_cast_impl< T >( type_id_, write() );
        }

        /**
        * @brief Conversion of the stored implementation to @code const T* @endcode.
        * @return pointer to the stored object if conversion was successful, else nullptr
        */
        template < class T >
        const T* target() const noexcept
        {
            if ( !impl_ )
                return nullptr;
            return type_erasure_table_detail::dynamic_cast_impl< T >( type_id_, read() );
        }

    private:
        using Buffer = std::array< char, 64 >;

        void* read() const noexcept;

        void* write();

        FunctionalDetail::Functions< Functional, Buffer > functions_;
        std::size_t type_id_;
        std::shared_ptr< void > impl_ = nullptr;
        Buffer buffer_;
    };
}
