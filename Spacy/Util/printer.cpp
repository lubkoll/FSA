// This file was automatically generated by friendly type erasure.
// Please do not modify.

#include "printer.hh"

namespace Spacy
{
    namespace Log
    {
        Printer::Printer() noexcept : impl_( nullptr )
        {
        }

        Printer::Printer( Printer&& other ) noexcept : functions_( other.functions_ ),
                                                       type_id_( other.type_id_ ),
                                                       impl_( other.impl_ )
        {
            other.impl_ = nullptr;
        }

        Printer::~Printer()
        {
            reset();
        }

        Printer& Printer::operator=( Printer&& other ) noexcept
        {
            reset();
            type_id_ = other.type_id_;
            functions_ = other.functions_;
            impl_ = other.impl_;
            other.impl_ = nullptr;
            return *this;
        }

        Printer::operator bool() const noexcept
        {
            return impl_ != nullptr;
        }

        void Printer::operator()( const char* tag, const char* name,
                                  const std::function< void( std::ostream& ) >& printable )
        {
            assert( impl_ );
            functions_.call_const_char_ptr_const_char_ptr_const_std_function_void_std_ostream_ref_ref(
                *this, impl_, tag, name, printable );
        }

        void Printer::reset() noexcept
        {
            if ( impl_ )
                functions_.del( impl_ );
        }
    }
}
