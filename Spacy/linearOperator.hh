// This file was automatically generated by friendly type erasure.
// Please do not modify.

#pragma once

#include <array>
#include <functional>
#include "Spacy/Util/table_util.hh"
#include <Spacy/Spaces/RealSpace/real.hh>
#include <Spacy/Util/Exceptions/invalidArgumentException.hh>
#include <Spacy/linearSolver.hh>
#include <Spacy/vector.hh>
#include <Spacy/vectorSpace.hh>
#include "Detail/details_for_linearOperator.hh"

namespace Spacy
{
    /// Type-erased linear operator \f$A:\ X \to Y \f$.
    class LinearOperator
    {
    public:
        LinearOperator() noexcept;

        template < typename T, typename std::enable_if< LinearOperatorDetail::LinearOperatorConcept<
                                   LinearOperator, typename std::decay< T >::type >::value >::type* = nullptr >
        LinearOperator( T&& value )
            : functions_(
                  {&type_erasure_table_detail::clone_into_shared_ptr< typename std::decay< T >::type >,
                   &type_erasure_table_detail::clone_into_buffer< typename std::decay< T >::type, Buffer >,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator,
                                                             typename std::decay< T >::type >::call_const_Vector_ref,
                   &LinearOperatorDetail::execution_wrapper<
                       LinearOperator, typename std::decay< T >::type >::call_const_LinearOperator_ref,
                   &LinearOperatorDetail::execution_wrapper<
                       LinearOperator, typename std::decay< T >::type >::add_const_LinearOperator_ref,
                   &LinearOperatorDetail::execution_wrapper<
                       LinearOperator, typename std::decay< T >::type >::subtract_const_LinearOperator_ref,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator,
                                                             typename std::decay< T >::type >::multiply_double,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator, typename std::decay< T >::type >::negate,
                   &LinearOperatorDetail::execution_wrapper<
                       LinearOperator, typename std::decay< T >::type >::compare_const_LinearOperator_ref,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator, typename std::decay< T >::type >::solver,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator, typename std::decay< T >::type >::domain,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator, typename std::decay< T >::type >::range,
                   &LinearOperatorDetail::execution_wrapper< LinearOperator, typename std::decay< T >::type >::space} ),
              type_id_( typeid( typename std::decay< T >::type ).hash_code() ), impl_( nullptr )
        {
            if ( sizeof( typename std::decay< T >::type ) <= sizeof( Buffer ) )
            {
                new ( &buffer_ ) typename std::decay< T >::type( std::forward< T >( value ) );
                impl_ = std::shared_ptr< typename std::decay< T >::type >(
                    std::shared_ptr< typename std::decay< T >::type >(),
                    static_cast< typename std::decay< T >::type* >( static_cast< void* >( &buffer_ ) ) );
            }
            else
                impl_ = std::make_shared< typename std::decay< T >::type >( std::forward< T >( value ) );
        }

        LinearOperator( const LinearOperator& other );

        LinearOperator( LinearOperator&& other ) noexcept;

        template < typename T, typename std::enable_if< LinearOperatorDetail::LinearOperatorConcept<
                                   LinearOperator, typename std::decay< T >::type >::value >::type* = nullptr >
        LinearOperator& operator=( T&& value )
        {
            return *this = LinearOperator( std::forward< T >( value ) );
        }

        LinearOperator& operator=( const LinearOperator& other );

        LinearOperator& operator=( LinearOperator&& other ) noexcept;

        /**
         * @brief Checks if the type-erased interface holds an implementation.
         * @return true if an implementation is stored, else false
         */
        explicit operator bool() const noexcept;

        /// Apply operator.
        Vector operator()( const Vector& x ) const;

        Real operator()( const LinearOperator& x ) const;

        LinearOperator& operator+=( const LinearOperator& y );

        LinearOperator& operator-=( const LinearOperator& y );

        LinearOperator& operator*=( double a );

        LinearOperator operator-() const;

        bool operator==( const LinearOperator& y ) const;

        std::function< Vector( const Vector& ) > solver() const;

        /// Access domain space \f$X\f$.
        const VectorSpace& domain() const;

        /// Access range space \f$Y\f$.
        const VectorSpace& range() const;

        /// Access underlying space of linear operators.
        const VectorSpace& space() const;

        /**
        * @brief Conversion of the stored implementation to @code  T* @endcode.
        * @return pointer to the stored object if conversion was successful, else nullptr
        */
        template < class T >
        T* target() noexcept
        {
            if ( !impl_ )
                return nullptr;
            return type_erasure_table_detail::dynamic_cast_impl< T >( type_id_, write() );
        }

        /**
        * @brief Conversion of the stored implementation to @code const T* @endcode.
        * @return pointer to the stored object if conversion was successful, else nullptr
        */
        template < class T >
        const T* target() const noexcept
        {
            if ( !impl_ )
                return nullptr;
            return type_erasure_table_detail::dynamic_cast_impl< T >( type_id_, read() );
        }

    private:
        using Buffer = std::array< char, 64 >;

        void* read() const noexcept;

        void* write();

        LinearOperatorDetail::Functions< LinearOperator, Buffer > functions_;
        std::size_t type_id_;
        std::shared_ptr< void > impl_ = nullptr;
        Buffer buffer_;
    };

    /// Access solver via A^-1. Throws for k!=-1.
    LinearSolver operator^( const LinearOperator& A, int k );

    /// Access solver via A^-1. Throws for k!=-1.
    LinearSolver operator^( LinearOperator&& A, int k );

    LinearOperator& axpy( LinearOperator& A, double a, LinearOperator B );
}
